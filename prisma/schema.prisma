generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                       Int                  @id @default(autoincrement())
  email                    String?              @unique
  name                     String?
  password                 String
  number                   String               @unique
  pin                      String?
  address                  String?
  country                  String?
  createdAt                DateTime             @default(now())
  dob                      DateTime?
  state                    String?
  walletID                 String               @unique
  emailVerified            Boolean              @default(false)
  verificationToken        String?              @unique
  verificationTokenExpires DateTime?
  resetToken               String?              @unique
  resetTokenExpires        DateTime?
  Balance                  Balance?
  Contact                  Contact[]
  OffRampTransaction       OffRampTransaction[]
  OnRampTransaction        OnRampTransaction[]
  sentTransfers            p2pTransfer[]        @relation("FromUserRelation")
  receivedTransfers        p2pTransfer[]        @relation("ToUserRelation")
}

model Contact {
  id       Int     @id @default(autoincrement())
  name     String
  phone    String
  userId   Int
  walletID String? @default(uuid())
  user     User    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Merchant {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  auth_type AuthType
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model OffRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int
  user      User         @relation(fields: [userId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model p2pTransfer {
  id         Int      @id @default(autoincrement())
  amount     Int
  timestamp  DateTime
  fromUserId Int
  toUserId   Int
  fromUser   User     @relation("FromUserRelation", fields: [fromUserId], references: [id])
  toUser     User     @relation("ToUserRelation", fields: [toUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([fromUserId, toUserId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ping {
  id        BigInt    @id @default(autoincrement())
  pinged_at DateTime? @default(now()) @db.Timestamptz(6)
  message   String?   @default("ping")
}

enum AuthType {
  Google
  Github
}

enum OnRampStatus {
  Success
  Failure
  Processing
}
